Turbo Assembler	 Version 4.1	    02/20/23 01:16:28	    Page 1
frame2.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     org 100h
      4
      5				     locals __
      6
      7	0100			     Start:
      8	0100  B8 B800			 mov ax, 0b800h
      9	0103  8E C0			 mov es, ax
     10	0105  BE 0082			 mov si, 82h		 ;pointer to cml arguments
     11
     12								     ;<----------------------|
     13	0108  B9 0004			 mov cx, 4		     ;number of	number arg   |
     14	010B				 __next:		     ;			     |
     15	010B  E8 0062			     call GetDecNumFromMem   ;get argument	     | Get arguments from cml
     16	010E  50			     push ax		     ;			     |
     17	010F  46			     inc si		     ;			     |
     18	0110  E2 F9			     loop __next	     ;<----------------------|
     19
     20	0112  E8 005B			 call GetDecNumFromMem	 ;get frame type
     21	0115  46			 inc si
     22
     23	0116  3D 0001			 cmp ax, 1   ;frame type in ax now	;<-|
     24	0119  74 0D			 je fst_type				;  |
     25	011B  3D 0002			 cmp ax, 2				;  |
     26	011E  74 0E			 je snd_type				;  |
     27										;  |
     28	0120  8B FE			 user_type:  mov di, si			;  |
     29	0122  83 C6 0A				     add si, 10d     ;skip symls    |
     30	0125  EB 0D 90				     jmp skip			;  |put	in di addres of	array symbols for frame
     31										;  |
     32	0128  BF 0000r			 fst_type:   lea di, single_frame	;  |
     33	012B  EB 07 90				     jmp skip			;  |
     34										;  |
     35	012E  BF 0009r			 snd_type:   lea di, double_frame	;  |
     36	0131  EB 01 90				     jmp skip			;<-|
     37	0134			     skip:
     38
     39	0134  E8 0055			 call GetHexNumFromMem
     40	0137  8B C8			 mov cx, ax	 ;save color atribute in cx
     41
     42	0139  8B F7			 mov si, di	 ;put in si addres of array symbols for	frame
     43
     44	013B  5A			 pop dx		 ;
     45	013C  D1 E2 D1 E2 D1 E2	D1+	 shl dx, 8	 ;dh - height of frame
     46	      E2 D1 E2 D1 E2 D1	E2+
     47	      D1 E2
     48	014C  58			 pop ax		 ;dl - weight of frame
     49	014D  03 D0			 add dx, ax
     50
     51	014F  5D			 pop bp		 ;put y	in bp
     52
     53	0150  BF 00A0			 mov di, 160d
     54	0153  58			 pop ax		 ;put x	in ax
     55
     56	0154  52			 push dx	 ;<-------------
     57	0155  F7 E7			 mul di		 ;	       |save dx
Turbo Assembler	 Version 4.1	    02/20/23 01:16:28	    Page 2
frame2.asm



     58	0157  5A			 pop dx		 ;<-------------
     59
     60	0158  03 E8			 add bp, ax	 ;make from x and y arguments memory offset in bp
     61
     62	015A  8B C1			 mov ax, cx	 ;put color atribute to	ax
     63	015C  D1 E0 D1 E0 D1 E0	D1+	 shl ax, 8
     64	      E0 D1 E0 D1 E0 D1	E0+
     65	      D1 E0
     66
     67	016C  E8 0044			 call DrawFrame
     68
     69	016F  C3			 ret
     70				     ;-------------------------------------------
     71				     ;GetDecimalNumberFromMemory
     72				     ;-------------------------------------------
     73				     ;EXPECTS:	 None
     74				     ;INPUTS:	     si	- pointer to place in memory which from	number will be taken
     75				     ;
     76				     ;OUTPUTS:	     ax	- number
     77				     ;		 si - pointer to byte after end	of number
     78				     ;
     79				     ;DESTROYS:	     dx, di
     80				     ;
     81				     ;-------------------------------------------
     82	0170			     GetDecNumFromMem	proc
     83	0170  33 C0			 xor ax, ax
     84	0172  33 D2			 xor dx, dx
     85	0174  BF 000A			     mov di, 10d
     86
     87	0177				     __next:
     88	0177  80 3C 0D			     cmp byte ptr [si],	13d
     89	017A  74 0F			     je	__break
     90
     91	017C  F7 E7			     mul di		 ;ax = ax*10
     92	017E  8A 14				     mov dl, [si]	 ;put in dl next simbol
     93	0180  80 EA 30				     sub dl, '0'		     ;convert simbol to	number
     94
     95	0183  03 C2				     add ax, dx			 ;ax +=	dh
     96
     97	0185  46				     inc si
     98	0186  80 3C 20			     cmp byte ptr [si],	' '
     99	0189  75 EC				     jne __next		 ;while(*si != ' ')
    100	018B				 __break:
    101
    102	018B  C3			 ret
    103	018C					     endp
    104
    105				     ;-------------------------------------------
    106				     ;GetHexNumberFromMemory
    107				     ;-------------------------------------------
    108				     ;EXPECTS:	 None
    109				     ;INPUTS:	     si	- pointer to place in memory which from	number will be taken
    110				     ;
    111				     ;OUTPUTS:	     ax	- number
    112				     ;		 si - pointer to byte after end	of number
    113				     ;
    114				     ;DESTROYS:	     dx
Turbo Assembler	 Version 4.1	    02/20/23 01:16:28	    Page 3
frame2.asm



    115				     ;
    116				     ;-------------------------------------------
    117	018C			     GetHexNumFromMem	proc
    118	018C  33 C0			 xor ax, ax
    119	018E  33 D2			 xor dx, dx
    120
    121	0190				     __next:
    122	0190  80 3C 0D			     cmp byte ptr [si],	13d
    123	0193  74 1D			     je	__break
    124
    125	0195  D1 E0 D1 E0 D1 E0	D1+	     shl ax, 4		 ;ax = ax*16
    126	      E0
    127	019D  8A 14				     mov dl, [si]	 ;put in dl next simbol
    128	019F  80 EA 30				     sub dl, '0'		     ;convert simbol to	number
    129
    130	01A2  80 FA 09			     cmp dl, 9
    131	01A5  7C 03			     jl	 __les10	 ;if [si] - letter
    132	01A7  80 EA 07				 sub dl, 7	 ;dl -=	7
    133	01AA				 __les10:
    134
    135	01AA  03 C2				     add ax, dx			 ;ax +=	dh
    136
    137	01AC  46				     inc si
    138	01AD  80 3C 20			     cmp byte ptr [si],	' '
    139	01B0  75 DE				     jne __next		 ;while(*si != ' ')
    140	01B2				 __break:
    141
    142	01B2  C3			 ret
    143	01B3					     endp
    144
    145				     ;--------------------------------
    146				     ;EXPECTS:	 es->videomemory
    147				     ;INPUTS:	 bp - offset in	vmem
    148				     ;			 dh - height of	frame
    149				     ;			 dl - weight of	frame
    150				     ;			 ah - color atr
    151				     ;		 si - pointer to array with 9 symbols to draw frame in format:
    152				     ;		 0:[left  up   corner]
    153				     ;		 1:[up	       border]
    154				     ;		 2:[right up   corner]
    155				     ;		 3:[left       border]
    156				     ;		 4:[simbol to fill frame]
    157				     ;		 5:[right      border]
    158				     ;		 6:[left  down corner]
    159				     ;		 7:[bottom     border]
    160				     ;		 8:[right down corner]
    161				     ;
    162				     ;OUTPUTS:	 None
    163				     ;DESTROYS:	 bx,
    164				     ;--------------------------------
    165	01B3			     DrawFrame	 proc
    166	01B3  80 EA 02			 sub dl, 2	     ;now we don`t consider the	1-st and the last symbol, because them we   +
    167				     will put without loops
    168	01B6  80 EE 02			 sub dh, 2	     ;the same reason
    169
    170	01B9  8B FD			 mov di, bp
    171	01BB  8A 04			 mov al, [si + 0]
Turbo Assembler	 Version 4.1	    02/20/23 01:16:28	    Page 4
frame2.asm



    172	01BD  8A 5C 01			 mov bl, [si + 1]
    173	01C0  8A 7C 02			 mov bh, [si + 2]
    174	01C3  33 C9			 xor cx, cx	     ;
    175	01C5  8A CA			 mov cl, dl	     ;cx = dl
    176	01C7  E8 0034			 call PutFrameLine   ;draw the first line
    177
    178	01CA  81 C5 00A0		 add bp, 160d	     ;go to the	next line
    179
    180	01CE  8A 5C 04			 mov bl, [si + 4]
    181	01D1  8A 7C 05			 mov bh, [si + 5]
    182	01D4				 __next:
    183	01D4  8B FD			     mov di, bp
    184	01D6  8A 44 03			     mov al, [si + 3]	 ;rewrite in the loop because in PutFrameLine al destroys
    185	01D9  33 C9			     xor cx, cx		 ;
    186	01DB  8A CA			     mov cl, dl		 ;cx = dl
    187	01DD  E8 001E			     call PutFrameLine	 ;draw all middle lines
    188	01E0  81 C5 00A0		     add bp, 160d	 ;go to	the next line
    189
    190	01E4  FE CE			     dec dh		 ;dh--
    191	01E6  80 FE 00			     cmp dh, 0
    192	01E9  75 E9			     jne __next		 ;while(dh!=0)
    193
    194	01EB  8B FD			 mov di, bp
    195	01ED  8A 44 06			 mov al, [si + 6]
    196	01F0  8A 5C 07			 mov bl, [si + 7]
    197	01F3  8A 7C 08			 mov bh, [si + 8]
    198	01F6  33 C9			 xor cx, cx	     ;
    199	01F8  8A CA			 mov cl, dl	     ;cx = dl
    200	01FA  E8 0001			 call PutFrameLine   ;draw the first line
    201
    202	01FD  C3			 ret
    203	01FE					 endp
    204
    205				     ;--------------------------------
    206				     ;PutFrameLine
    207				     ;--------------------------------
    208				     ;EXPECTS:	 es -> videomemory segment
    209				     ;INPUTS:	 di - offset in	videomemory
    210				     ;		 ah - color atr	of the symbols
    211				     ;		 al - ASCII code of the	1-st symbol
    212				     ;		 bl - ASCII code of cx middle symbols
    213				     ;		 bh - ASCII code of the	last symbol
    214				     ;		 cx - numbers of middle	symbols
    215				     ;
    216				     ;OUTPUTS:	 None
    217				     ;DESTROYS:	 di, al, cx
    218				     ;--------------------------------
    219	01FE			     PutFrameLine    proc
    220	01FE  FC			 cld
    221	01FF  AB			 stosw	     ;put the fisrt symbol
    222
    223	0200  8A C3			 mov al, bl  ;change putting simdol to middle symbol
    224	0202  F3> AB			 rep stosw   ;put all middle symbols
    225
    226	0204  8A C7			 mov al, bh  ;change putting simdol to the last	symbol
    227	0206  AB			 stosw
    228
Turbo Assembler	 Version 4.1	    02/20/23 01:16:28	    Page 5
frame2.asm



    229	0207  C3			 ret
    230	0208					     endp
    231				     ;--------------------------------
    232
    233	0208			     .data
    234				     ;		 0:[left  up   corner]
    235				     ;		 1:[up	       border]
    236				     ;		 2:[right up   corner]
    237				     ;		 3:[left       border]
    238				     ;		 4:[simbol to fill frame]
    239				     ;		 5:[right      border]
    240				     ;		 6:[left  down corner]
    241				     ;		 7:[bottom     border]
    242				     ;		 8:[right down corner]
    243
    244	0000  DA C4 BF 7C 20 7C	C0+  single_frame db 0dah, 0c4h, 0bfh, '|',  ' ', '|',	0c0h, '_',  0d9h
    245	      5F D9
    246
    247	0009  C9 CD BB BA 20 BA	C8+  double_frame db 0c9h, 0cdh, 0bbh, 0bah, ' ', 0bah,	0c8h, 0cdh, 0bch
    248	      CD BC
    249
    250				     end Start
Turbo Assembler	 Version 4.1	    02/20/23 01:16:28	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/20/23"
??FILENAME			  Text	 "frame2  "
??TIME				  Text	 "01:16:28"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRAME2
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
DOUBLE_FRAME			  Byte	 DGROUP:0009
DRAWFRAME			  Near	 DGROUP:01B3
FST_TYPE			  Near	 DGROUP:0128
GETDECNUMFROMMEM		  Near	 DGROUP:0170
GETHEXNUMFROMMEM		  Near	 DGROUP:018C
PUTFRAMELINE			  Near	 DGROUP:01FE
SINGLE_FRAME			  Byte	 DGROUP:0000
SKIP				  Near	 DGROUP:0134
SND_TYPE			  Near	 DGROUP:012E
START				  Near	 DGROUP:0100
USER_TYPE			  Near	 DGROUP:0120
__BREAK				  Near	 DGROUP:018B
__BREAK				  Near	 DGROUP:01B2
__LES10				  Near	 DGROUP:01AA
__NEXT				  Near	 DGROUP:010B
__NEXT				  Near	 DGROUP:0177
__NEXT				  Near	 DGROUP:0190
__NEXT				  Near	 DGROUP:01D4

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0012 Word	  Public  DATA
  _TEXT				  16  0208 Word	  Public  CODE
